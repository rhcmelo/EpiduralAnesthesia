Fixed bugs: 
Version 1.1 - Some work has been performed on the vertices of the mesh, so that it is now easier to implement a haptic environment with fbx object from 3ds studio or blender.

Scenes have been updated and now included some non symetric objects from fbx files.

Version 1.2 - The position of the Workspace on the Z axis has been inverted in the plugin code so that there is no need anymore to invert it in c#

Version 1.3 - One Trial scene removed

Version 1.4 - Orientation of the workspace has been refined - So, when updating the workspace orientation using a camera for instance, the position of the workspace is not altered anymore. Only the orientation will changed.

Version 1.5 - In puncture mode - Torque orientation is now sensed - needle can be (torque) reoriented when injection is performed - See GetProxyValues() in GemericFunctionClass.
				
			  NEW:					In PluginImport Class:
			  
									[DllImport("ASimpleHapticPlugin")]
									public static extern void SetPunctureDirection(IntPtr punctureVectorDirection);

			UPDATED:				In GenericFunctionclass Class:

									GetProxyValues(): Update in order to be able to rotate the stylus on the torque axis when injecting in punctire mode.
									In Puncture mode, the function GetProxyOrientation() returns the restricted orientation of the haptic stylus in pitch, yaw and roll. 
									In case, you want to be able to rotate the stylus on the torque axis (local z axis) when injecting, you must use 
									the functions GetProxyRight(), GetProxyDirection() and GetProxyTorque() as show in the method GetProxyValues() in 
									GenericFunctionsClass.cs.


Version 1.6 - A tiny bug fixed in the code of the plugin for the haptic injection - no change in C# code and Unity Scene
	      When Touching a shape with can be popped through (PopThrough parameter = 0.0f) - the needle does not get somehow stuck to the object
				

